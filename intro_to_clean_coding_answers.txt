1. Clean code is important because it is easy to read which saves time while working on a project. This also allows for much easier debugging and modification because it’s easier to find mistakes when the code is legible. Clean coding also tends to remove code that is unnecessary or isn’t “perfect” which allows for a lot faster functionality in your application. Basically speaking, clean code allows you to waste less time trying to figure out what the code says and spend more time actually writing new code.

2. Another commonly used object that relies on computers is the microwave. If a microwave is not programmed to output the correct amount of power then it can overheat or put off too much radiation which can cause fires or unnecessary health risks.

3. I would not consider this code to be clean because it’s naming convention does not convey what the function does. It should be named convertDegrees or convertUnits. 

4. I would consider this code to be clean.


5. A. FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)

  IF paymentType = 'CASH' THEN
      CALL getPayment RETURNING amount
      PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
  ELSE IF paymentType = 'CREDIT CARD' THEN
      CALL getPayment RETURNING amount
      PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
  END IF
 
  PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
END FUNCTION


5. B. IF (guest.accountActive) AND IF NOT (guest.hasOverdueBooks) AND IF guest.outstandingFees = 0 THEN
 APPEND book to guest.books
 SET book.status to "Checked Out"
 PRINT "Your books have been issued."
ELSE
 Print "Unable to check out book."
END IF
END FUNCTION


5. C.CLASS BankAccount

FUNCTION displayBalance
   PRINT balance
END FUNCTION

FUNCTION deposit(amount)
   SET balance to balance + amount
   PRINT balance
END FUNCTION

FUNCTION withdraw(amount)
    IF balance > amount THEN
      SET balance to balance - amount
    END IF
    PRINT balance
END FUNCTION

FUNCTION creditCardOffer
    IF NOT(customer.hasCreditCard) THEN
        CALL offerCreditCard
    END IF
END FUNCTION

FUNCTION checkStatus
    IF NOT(customer.hasCheckingAccount) THEN
        CALL offerCheckingAccount
    END
END FUNCTION

....
....
....

END


6.
function squareRoot(integers){
 integers = integers.reduce( (sum, value) => sum += value );
 return !(Math.sqrt(integers) % 1) ? true : integers;
}

squareRoot([5,5,5,5,5])


7.
function duplicate(myArray){
   for (var i = 0; i < myArray.length; i++)
   {
       if (myArray.indexOf(myArray[i]) !== myArray.lastIndexOf(myArray[i])) {
           return false;
       }
   }
   return true;
}
